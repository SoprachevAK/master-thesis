= Цели и задачи

Сервис PolyMap является продолжением бакалаврской работы, в которой была реализована пилотная версия приложения, она обладала следующими ограничениями:
- Поддерживалась только iOS платформа
- Поддерживалась только одна карта Политеха, которая была жёстко закодирована в приложении
- Распространялось в виде приложения, которое требовалось устанавливать на устройство

== Цели
Цели магистерской работы вытекают из ограничений пилотной версии приложения:
+ Разработать кроссплатформенное решение, которое будет доступно прямо в браузере, и будет адаптировано под управление как с помощью мыши на компьютере, так и с помощью сенсорного экрана на мобильных устройствах.
+ Реализовать возможность динамического просмотра разных карт, которые будут загружаться из удалённого сервера по запросу пользователя.
+ Серверная часть приложения должна справляться с вариативными нагрузками с высокими пиками. Должно быть быстрое время ответа в разных регионах мира.

== Задачи
Для достижения поставленных целий необходимо решить следующие задачи:
+ Спроектировать и реализовать гибкую клиент-серверную архитектуру приложения
+ Разработать веб-приложение, которое будет отображать интерактивные карты в формате Extended-IMDF (формат карт, используемый в приложении PolyMap)
  + Реализовать мобильную и компьютерную версии приложений.
  + Интерфейс должен быть адаптирован под разные устройства.
  + Управление картой на мобильных устройствах должно поддерживать жесты несколькими пальцами (для вращения и приближения карты).
+ Реализовать серверную часть, которая будет хранить карты и предоставлять их пользователю по запросу, а так же обрабатывать сопутствующие запросы веб-приложения (функция поделиться, генерация QR коров, сокращение ссылок).
+ Добавить в конструктор карт возможность загрузки карты на сервер.

== Актуальность

Обусловлена популярностью пилотной версии PolyMap. В первую неделю учебного семестра, приложением пользовалось более 6000 студентов, что составляет около 80% от всей возможной аудитории.

= Архитектура

== Клиентская часть
=== Vue
=== Three.js и WebGL
=== AppleMapKit

== Серверная часть
Сервис будет сталкиваться с неравномерной нагрузкой с высокими пиками, которые будут возникать в связи со следующими причинами:
- Повышенный спрос на карту университетов в начале учебного семестра
- Повышенный спрос на карту университетов в начале каждого дня. По утрам, в 10:00 и в 12:00, перед началом пар, студенты будут открывать карту, чтобы найти нужную аудиторию. Что подтверждается статистикой использования пилотной версии.
// TODO: Добавить график использования пилотной версии PolyMap
- При использовании карты на временных конференциях и выставках, большинство пользователей будут открывать карту одновременно, что создаст пиковую нагрузку на сервер.

Для решения этих проблем необходимо предусмотреть горизонтальное масштабирование серверной части, для этого был выбран микросервисных подход к разработке.

== Микросервисы
Использование микросервисов позволит разделить приложение на независимые части, и те из них, на которые будет повышенная нагрузка, можно будет масштабировать отдельно от остальных.

Для полного покрытия функционала сервиса, необходимо разработать следующие микросервисы:
+ Сервис раздачи карт – заниматься раздачей файлов карты пользователям в зависимости от запроса.
+ Сервис сокращения ссылок – используется для функционала "поделиться маршрутом", и вместо длинной ссылки с uuid стартовой и конечной точки, будет генерироваться короткая ссылка, ассоциированная с этим маршрутом.
+ Сервис генерации приглашений – используется для функции создания приглашений на маршрут, позволяет приложить к приглашению ещё и текстовое сообщение, которое будет отображаться в приложении при открытии приглашения.
+ Сервис генерации QR-кодов – используется для функции создания QR-кода для функции "поделиться маршрутом". Функционал вынесен из клиента в серверно приложение, для того, чтобы в будущем можно было использовать его в нативных мобильных версиях.
+ Сервис раздачи фронтеда – используется для генерации OpenGraph метаданных для index.html страницы карт.

Приложение хорошо разбилось на полностью независимые микросервисы.

=== Serverless
==== Yandex Cloud
=== CDN
Cloudflare

== Система контроля версий
При разработке проекта в микросервисном подходе выделают два способа организации системы контроля версий:
+ Монорепозиторий – все микросервисы хранятся в одном репозитории. Плюсом этого подходя является сквозное версионирование всех микросервисов, каждый коммит порождает новую общую версию приложения, которая гарантирована не нарушит совместимость. Минусом такого подхода является сильная связанность между микросервисами, что усложняет их независимую разработку, тестирование и развёртывание.

+ Полирепозиторий – каждый микросервис хранится в своём репозитории. Плюсом такого подхода является независимость разработки, тестирования и развёртывания каждого микросервиса. Минусом такого подхода является сложность в управлении версиями. Может случиться так, что при обновление одного микросервиса сломается совместимость с другим.

Я выбрал второй подход, так как он лучше позволяет разделить кодовые базы и вести независимую разработку. Сложность версионирования решается гарантиями обратной совместимости – ни одна новая версия не должна ломать совместимость с предыдущими версиями. Это требование и так необходимо соблюдать, что бы корректно работало горизонтальное масштабирование, при котором в одним момент времени могут работать несколько версий одного микросервиса.

=== Выбор системы контроля версий

В качестве хранилища системы контроля версий Git можно использовать несколько систем:
- GitHub
- GitLab
- Bitbucket

Каждая из них обладает своими плюсами и минусам. Для выбора была составлена сравнительная таблица функционала, который потребуется для разработки проекта.

// TODO: Добавить сравнительную таблицу систем контроля версий

Как видно из таблицы, наибольшим числом плюсов обладает GitHub, поэтому он был выбран в качестве системы контроля версий для проекта.

В GitHub была создана отдельная огранизация, в которой хранятся все репозитории микросервисов проекта.
// TODO: Добавить скриншот организации в GitHub


=== CI/CD
При разработке по микросервисной архитектуре крайне важно на самых ранних этапах автоматизировать процесс сборки и развёртывания приложения. Это обусловлено тем, что при таком подходе появляется множество проектов с частыми обновлениями, автоматизация рутинных процессов позволяет снизить количество ошибок, которые могут возникнуть при ручном развёртывании. А так же позволяет добавить автоматизированные тесты для контроля качества кода с самых ранних этапов.

=== GitHub Actions
В выбранной системе контроля версий GitHub, для автоматизации процессов сборки и развёртывания, используется встроенный инструмент GitHub Actions. С его помощью можно настроить различные автоматические процессы, которые будут запускаться при определённых действиях в репозитории. Процессы могут состоять из нескольких последовательных и параллельных шагов.

=== Infrastructure as Code (IAC)
Для автоматизации развёртывания приложений в CloudNative среде можно использовать IAC (Infrastructure as Code) подход. Он позволяет декларативно описать инфраструктуру в виде кода, который можно хранить рядом с кодом приложения в системе контроля версий. Это позволяет версионировать инфраструктуру вместе с кодом приложение, что в свою очередь позволяет откатить инфраструктуру к предыдущей версии, если в ней были внесены ошибки. Так же такой подход сильно упрощает развёртывание для Serverless приложений, который состоят из множества ресурсов, которые необходимо связать между собой.

==== Terraform
Для реализации IAC подхода наиболее популярным инструментом является Terraform. Все облачные провайдеры в первую очередь добавляют поддержку именно этого инструмента, в том числе и Yandex Cloud который используется в моём случае.

В Terraform инфраструктура описывается кодом на специальном языке HCL (HashiCorp Configuration Language). Базовой сущьностью в Terraform является ресурс, который описывает отдельный компонент инфраструктуры (Api GateWay, Serverless Container, Docker Registry). Внутри блока ресурса описываются его параметры. Внутри одного Terraform проекта можно ссылаться на другие ресурсы. Например, ресурс Serverless Container должен в своих параметрах ссылаться на ресурс Docker Registry, в котором хранится образ контейнера.

== Тестирование
== Стек технологий
TS – тк типизированный
// TODO: Добавить описание стека технологий

= Реализация

== Тестирование

= Анализы результатов
